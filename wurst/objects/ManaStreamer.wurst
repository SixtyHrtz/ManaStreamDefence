package ManaStreamer

import SendManaFlux
import StopManaFlux
import ManaStream
import initlater ManaStreamEntity
import LinkedList
import ClosureEvents

public class ManaStreamer extends ManaStreamEntity

    construct(unit entity)
        super(entity)

        EventListener.onTargetCast(entity, SEND_MANA_FLUX_ID,
            (caster, target) -> onSendManaFluxCast(caster, target))
        EventListener.onCast(entity, STOP_MANA_FLUX_ID,
            (caster) -> onStopManaFluxCast(caster))
            
    function onSendManaFluxCast(unit caster, unit target)
        for manaStream in manaStreams
            if manaStream.targetEntity.entity == target
                return

        addManaStream(target, caster)
        target.getStreamEntity().addManaStream(caster)

        testPrint()

    function onStopManaFluxCast(unit caster)
        manaStreams.forEach() (stream) ->
            stream.targetEntity.removeManaStream(caster)
            destroy stream

        manaStreams.clear()

    override function testPrint()
        super.testPrint()
        manaStreams.forEach() (ManaStream t) ->
            t.targetEntity.testPrint()
